From de98172537e690ac50acb59ee7da313dfaaaa9b1 Mon Sep 17 00:00:00 2001
From: Wang Xuerui <git@xen0n.name>
Date: Tue, 4 Feb 2020 22:45:48 +0800
Subject: [PATCH 3/3] Add Loongson AMO support.

---
 bfd/elfxx-mips.c                      |  2 +
 binutils/readelf.c                    |  2 +
 gas/config/tc-mips.c                  | 14 ++++++-
 gas/testsuite/gas/mips/loongson-amo.d | 60 +++++++++++++++++++++++++++
 gas/testsuite/gas/mips/loongson-amo.s | 44 ++++++++++++++++++++
 gas/testsuite/gas/mips/mips.exp       |  3 +-
 include/elf/mips.h                    |  3 +-
 include/opcode/mips.h                 |  2 +
 opcodes/mips-dis.c                    | 11 ++++-
 opcodes/mips-opc.c                    | 41 ++++++++++++++++++
 10 files changed, 177 insertions(+), 5 deletions(-)
 create mode 100644 gas/testsuite/gas/mips/loongson-amo.d
 create mode 100644 gas/testsuite/gas/mips/loongson-amo.s

diff --git a/bfd/elfxx-mips.c b/bfd/elfxx-mips.c
index 9d4b73b358..d9243dda20 100644
--- a/bfd/elfxx-mips.c
+++ b/bfd/elfxx-mips.c
@@ -16091,6 +16091,8 @@ print_mips_ases (FILE *file, unsigned int mask)
     fputs ("\n\tLoongson EXT ASE", file);
   if (mask & AFL_ASE_LOONGSON_EXT2)
     fputs ("\n\tLoongson EXT2 ASE", file);
+  if (mask & AFL_ASE_LOONGSON_AMO)
+    fputs ("\n\tLoongson AMO ASE", file);
   if (mask == 0)
     fprintf (file, "\n\t%s", _("None"));
   else if ((mask & ~AFL_ASE_MASK) != 0)
diff --git a/binutils/readelf.c b/binutils/readelf.c
index c3dfb9abf9..5297245f56 100644
--- a/binutils/readelf.c
+++ b/binutils/readelf.c
@@ -16126,6 +16126,8 @@ print_mips_ases (unsigned int mask)
     fputs ("\n\tLoongson EXT ASE", stdout);
   if (mask & AFL_ASE_LOONGSON_EXT2)
     fputs ("\n\tLoongson EXT2 ASE", stdout);
+  if (mask & AFL_ASE_LOONGSON_AMO)
+    fputs ("\n\tLoongson AMO ASE", stdout);
   if (mask == 0)
     fprintf (stdout, "\n\t%s", _("None"));
   else if ((mask & ~AFL_ASE_MASK) != 0)
diff --git a/gas/config/tc-mips.c b/gas/config/tc-mips.c
index 03d785ca5c..dfe60b3749 100644
--- a/gas/config/tc-mips.c
+++ b/gas/config/tc-mips.c
@@ -1574,6 +1574,8 @@ enum options
     OPTION_NO_LOONGSON_EXT,
     OPTION_LOONGSON_EXT2,
     OPTION_NO_LOONGSON_EXT2,
+    OPTION_LOONGSON_AMO,
+    OPTION_NO_LOONGSON_AMO,
     OPTION_END_OF_ENUM
   };
 
@@ -1642,6 +1644,8 @@ struct option md_longopts[] =
   {"mno-loongson-ext", no_argument, NULL, OPTION_NO_LOONGSON_EXT},
   {"mloongson-ext2", no_argument, NULL, OPTION_LOONGSON_EXT2},
   {"mno-loongson-ext2", no_argument, NULL, OPTION_NO_LOONGSON_EXT2},
+  {"mloongson-amo", no_argument, NULL, OPTION_LOONGSON_AMO},
+  {"mno-loongson-amo", no_argument, NULL, OPTION_NO_LOONGSON_AMO},
 
   /* Old-style architecture options.  Don't add more of these.  */
   {"m4650", no_argument, NULL, OPTION_M4650},
@@ -1863,6 +1867,11 @@ static const struct mips_ase mips_ases[] = {
     OPTION_LOONGSON_EXT2, OPTION_NO_LOONGSON_EXT2,
     0, 0, -1, -1,
     -1 },
+
+  { "loongson-amo", ASE_LOONGSON_AMO, 0,
+    OPTION_LOONGSON_AMO, OPTION_NO_LOONGSON_AMO,
+    0, 0, -1, -1,
+    -1 },
 };
 
 /* The set of ASEs that require -mfp64.  */
@@ -19370,6 +19379,8 @@ mips_convert_ase_flags (int ase)
     ext_ases |= AFL_ASE_LOONGSON_EXT;
   if (ase & ASE_LOONGSON_EXT2)
     ext_ases |= AFL_ASE_LOONGSON_EXT2;
+  if (ase & ASE_LOONGSON_AMO)
+    ext_ases |= AFL_ASE_LOONGSON_AMO;
 
   return ext_ases;
 }
@@ -20125,7 +20136,8 @@ static const struct mips_cpu_info mips_cpu_info_table[] =
   { "gs464e",         0, ASE_LOONGSON_MMI | ASE_LOONGSON_CAM | ASE_LOONGSON_EXT
      | ASE_LOONGSON_EXT2,	ISA_MIPS64R2,	CPU_GS464E },
   { "gs464v",         0, ASE_LOONGSON_MMI | ASE_LOONGSON_CAM | ASE_LOONGSON_EXT
-     | ASE_LOONGSON_EXT2 | ASE_MSA | ASE_MSA64,	ISA_MIPS64R2,	CPU_GS464V },
+     | ASE_LOONGSON_EXT2 | ASE_MSA | ASE_MSA64 | ASE_LOONGSON_AMO,
+     ISA_MIPS64R2,	CPU_GS464V },
   { "gs264e",         0, ASE_LOONGSON_MMI | ASE_LOONGSON_CAM | ASE_LOONGSON_EXT
      | ASE_LOONGSON_EXT2 | ASE_MSA | ASE_MSA64,	ISA_MIPS64R2,	CPU_GS264E },
 
diff --git a/gas/testsuite/gas/mips/loongson-amo.d b/gas/testsuite/gas/mips/loongson-amo.d
new file mode 100644
index 0000000000..91214df313
--- /dev/null
+++ b/gas/testsuite/gas/mips/loongson-amo.d
@@ -0,0 +1,60 @@
+#as: -mloongson-amo -mabi=64
+#objdump: -M reg-names=numeric -M loongson-amo -dp
+#name: Loongson AMO tests
+
+.*:     file format .*
+
+private flags = .*
+
+MIPS ABI Flags Version: 0
+ISA: .*
+GPR size: .*
+CPR1 size: .*
+CPR2 size: .*
+FP ABI: .*
+ISA Extension: None
+ASEs:
+	Loongson AMO ASE
+FLAGS 1: .*
+FLAGS 2: .*
+
+Disassembly of section \.text:
+
+[0-9a-f]+ <\.text>:
+   0:	70410039 	amswap_sync\.w	\$0,\$1,0\(\$2\)
+   4:	70620879 	amswap_sync\.d	\$1,\$2,0\(\$3\)
+   8:	708310b9 	amadd_sync\.w	\$2,\$3,0\(\$4\)
+   c:	70a418f9 	amadd_sync\.d	\$3,\$4,0\(\$5\)
+  10:	70c52139 	amand_sync\.w	\$4,\$5,0\(\$6\)
+  14:	70e62979 	amand_sync\.d	\$5,\$6,0\(\$7\)
+  18:	710731b9 	amor_sync\.w	\$6,\$7,0\(\$8\)
+  1c:	712839f9 	amor_sync\.d	\$7,\$8,0\(\$9\)
+  20:	71494239 	amxor_sync\.w	\$8,\$9,0\(\$10\)
+  24:	716a4a79 	amxor_sync\.d	\$9,\$10,0\(\$11\)
+  28:	718b52b9 	ammax_sync\.w	\$10,\$11,0\(\$12\)
+  2c:	71ac5af9 	ammax_sync\.d	\$11,\$12,0\(\$13\)
+  30:	71cd6339 	ammin_sync\.w	\$12,\$13,0\(\$14\)
+  34:	71ee6b79 	ammin_sync\.d	\$13,\$14,0\(\$15\)
+  38:	720f73b9 	ammaxu_sync\.w	\$14,\$15,0\(\$16\)
+  3c:	72307bf9 	ammaxu_sync\.d	\$15,\$16,0\(\$17\)
+  40:	72518439 	amminu_sync\.w	\$16,\$17,0\(\$18\)
+  44:	72728c79 	amminu_sync\.d	\$17,\$18,0\(\$19\)
+  48:	72939038 	amswap\.w	\$18,\$19,0\(\$20\)
+  4c:	72b49878 	amswap\.d	\$19,\$20,0\(\$21\)
+  50:	72d5a0b8 	amadd\.w	\$20,\$21,0\(\$22\)
+  54:	72f6a8f8 	amadd\.d	\$21,\$22,0\(\$23\)
+  58:	7317b138 	amand\.w	\$22,\$23,0\(\$24\)
+  5c:	7338b978 	amand\.d	\$23,\$24,0\(\$25\)
+  60:	7359c1b8 	amor\.w	\$24,\$25,0\(\$26\)
+  64:	737ac9f8 	amor\.d	\$25,\$26,0\(\$27\)
+  68:	739bd238 	amxor\.w	\$26,\$27,0\(\$28\)
+  6c:	73bcda78 	amxor\.d	\$27,\$28,0\(\$29\)
+  70:	73dde2b8 	ammax\.w	\$28,\$29,0\(\$30\)
+  74:	73feeaf8 	ammax\.d	\$29,\$30,0\(\$31\)
+  78:	701ff338 	ammin\.w	\$30,\$31,0\(\$0\)
+  7c:	7020fb78 	ammin\.d	\$31,\$0,0\(\$1\)
+  80:	704103b8 	ammaxu\.w	\$0,\$1,0\(\$2\)
+  84:	70620bf8 	ammaxu\.d	\$1,\$2,0\(\$3\)
+  88:	70831438 	amminu\.w	\$2,\$3,0\(\$4\)
+  8c:	70a41c78 	amminu\.d	\$3,\$4,0\(\$5\)
+	\.\.\.
diff --git a/gas/testsuite/gas/mips/loongson-amo.s b/gas/testsuite/gas/mips/loongson-amo.s
new file mode 100644
index 0000000000..2ab3565bbf
--- /dev/null
+++ b/gas/testsuite/gas/mips/loongson-amo.s
@@ -0,0 +1,44 @@
+	.text
+	.set noat
+	.set noreorder
+
+	amswap_sync.w	$0, $1, 0($2)
+	amswap_sync.d	$1, $2, 0($3)
+	amadd_sync.w	$2, $3, 0($4)
+	amadd_sync.d	$3, $4, 0($5)
+	amand_sync.w	$4, $5, 0($6)
+	amand_sync.d	$5, $6, 0($7)
+	amor_sync.w	$6, $7, 0($8)
+	amor_sync.d	$7, $8, 0($9)
+	amxor_sync.w	$8, $9, 0($10)
+	amxor_sync.d	$9, $10, 0($11)
+	ammax_sync.w	$10, $11, 0($12)
+	ammax_sync.d	$11, $12, 0($13)
+	ammin_sync.w	$12, $13, 0($14)
+	ammin_sync.d	$13, $14, 0($15)
+	ammaxu_sync.w	$14, $15, 0($16)
+	ammaxu_sync.d	$15, $16, 0($17)
+	amminu_sync.w	$16, $17, 0($18)
+	amminu_sync.d	$17, $18, 0($19)
+	amswap.w	$18, $19, 0($20)
+	amswap.d	$19, $20, 0($21)
+	amadd.w		$20, $21, 0($22)
+	amadd.d		$21, $22, 0($23)
+	amand.w		$22, $23, 0($24)
+	amand.d		$23, $24, 0($25)
+	amor.w		$24, $25, 0($26)
+	amor.d		$25, $26, 0($27)
+	amxor.w		$26, $27, 0($28)
+	amxor.d		$27, $28, 0($29)
+	ammax.w		$28, $29, 0($30)
+	ammax.d		$29, $30, 0($31)
+	ammin.w		$30, $31, 0($0)
+	ammin.d		$31, $0, 0($1)
+	ammaxu.w	$0, $1, 0($2)
+	ammaxu.d	$1, $2, 0($3)
+	amminu.w	$2, $3, 0($4)
+	amminu.d	$3, $4, 0($5)
+
+# Force at least 8 (non-delay-slot) zero bytes, to make 'objdump' print ...
+	.align  2
+	.space  8
diff --git a/gas/testsuite/gas/mips/mips.exp b/gas/testsuite/gas/mips/mips.exp
index 2084ee0829..c85df73a4e 100644
--- a/gas/testsuite/gas/mips/mips.exp
+++ b/gas/testsuite/gas/mips/mips.exp
@@ -1400,7 +1400,8 @@ if { [istarget mips*-*-vxworks*] } {
     run_dump_test "loongson-3a-mmi"
 
     run_dump_test_arches "loongson-cam"		[mips_arch_list_matching gs464]
-    run_dump_test_arches "loongson-ext2"	[mips_arch_list_matching gs464]  
+    run_dump_test_arches "loongson-ext2"	[mips_arch_list_matching gs464]
+    run_dump_test "loongson-amo"
 
     if { $has_newabi } {
 	run_dump_test_arches "octeon"	[mips_arch_list_matching octeon]
diff --git a/include/elf/mips.h b/include/elf/mips.h
index fe04d2fa4e..804307f7c9 100644
--- a/include/elf/mips.h
+++ b/include/elf/mips.h
@@ -1251,7 +1251,8 @@ extern void bfd_mips_elf_swap_abiflags_v0_out
 #define AFL_ASE_LOONGSON_CAM 0x00080000 /* Loongson CAM ASE.  */
 #define AFL_ASE_LOONGSON_EXT 0x00100000 /* Loongson EXT instructions.  */
 #define AFL_ASE_LOONGSON_EXT2 0x00200000 /* Loongson EXT2 instructions.  */
-#define AFL_ASE_MASK         0x003effff /* All ASEs.  */
+#define AFL_ASE_LOONGSON_AMO 0x00400000 /* Loongson AMO ASE.  */
+#define AFL_ASE_MASK         0x007effff /* All ASEs.  */
 
 /* Values for the isa_ext word of an ABI flags structure.  */
 
diff --git a/include/opcode/mips.h b/include/opcode/mips.h
index eaa8c7c1b6..7b6a03ef0e 100644
--- a/include/opcode/mips.h
+++ b/include/opcode/mips.h
@@ -1311,6 +1311,8 @@ static const unsigned int mips_isa_table[] = {
 /* The Enhanced VA Scheme (EVA) extension has instructions which are
    only valid for the R6 ISA.  */
 #define ASE_EVA_R6		0x02000000
+/* Loongson Atomic Memory Operations (AMO).  */
+#define ASE_LOONGSON_AMO	0x04000000
 
 /* MIPS ISA defines, use instead of hardcoding ISA level.  */
 
diff --git a/opcodes/mips-dis.c b/opcodes/mips-dis.c
index 06be029d2f..f318bf709f 100644
--- a/opcodes/mips-dis.c
+++ b/opcodes/mips-dis.c
@@ -647,8 +647,9 @@ const struct mips_arch_choice mips_arch_choices[] =
 
   { "gs464v",   1, bfd_mach_mips_gs464v, CPU_GS464V,
     ISA_MIPS64R2, ASE_LOONGSON_MMI | ASE_LOONGSON_CAM | ASE_LOONGSON_EXT
-    | ASE_LOONGSON_EXT2 | ASE_MSA | ASE_MSA64, mips_cp0_names_numeric, NULL,
-    0, mips_cp1_names_mips3264, mips_hwr_names_numeric },
+    | ASE_LOONGSON_EXT2 | ASE_MSA | ASE_MSA64 | ASE_LOONGSON_AMO,
+    mips_cp0_names_numeric, NULL, 0, mips_cp1_names_mips3264,
+    mips_hwr_names_numeric },
 
   { "gs264e",   1, bfd_mach_mips_gs464e, CPU_GS264E,
     ISA_MIPS64R2, ASE_LOONGSON_MMI | ASE_LOONGSON_CAM | ASE_LOONGSON_EXT
@@ -986,6 +987,12 @@ parse_mips_ase_option (const char *option)
       return TRUE;
     }
 
+  if (CONST_STRNEQ (option, "loongson-amo"))
+    {
+      mips_ase |= ASE_LOONGSON_AMO;
+      return TRUE;
+    }
+
   return FALSE;
 }
 
diff --git a/opcodes/mips-opc.c b/opcodes/mips-opc.c
index 560a07b65c..7df346bc30 100644
--- a/opcodes/mips-opc.c
+++ b/opcodes/mips-opc.c
@@ -425,6 +425,9 @@ decode_mips_operand (const char *p)
 /* Loongson EXTensions R2 (EXT2) instructions support.  */
 #define LEXT2	ASE_LOONGSON_EXT2
 
+/* Loongson Atomic Memory Operation (AMO) support. */
+#define LAMO	ASE_LOONGSON_AMO
+
 /* The order of overloaded instructions matters.  Label arguments and
    register arguments look the same. Instructions that can have either
    for arguments must apear in the correct order in this table for the
@@ -528,6 +531,44 @@ const struct mips_opcode mips_builtin_opcodes[] =
 {"dcto",		"d,s",		0x700000e2, 0xfc1f07ff,	WR_1|RD_2,		0,		0,		LEXT2,	0 },
 {"dctz",		"d,s",		0x700000a2, 0xfc1f07ff,	WR_1|RD_2,		0,		0,		LEXT2,	0 },
 
+/* Loongson Atomic Memory Operation (AMO) ASE. */
+{"amswap_sync.w",	"d,t,-0(s)",	0x70000039, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"amswap_sync.d",	"d,t,-0(s)",	0x70000079, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"amadd_sync.w",	"d,t,-0(s)",	0x700000b9, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"amadd_sync.d",	"d,t,-0(s)",	0x700000f9, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"amand_sync.w",	"d,t,-0(s)",	0x70000139, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"amand_sync.d",	"d,t,-0(s)",	0x70000179, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"amor_sync.w",		"d,t,-0(s)",	0x700001b9, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"amor_sync.d",		"d,t,-0(s)",	0x700001f9, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"amxor_sync.w",	"d,t,-0(s)",	0x70000239, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"amxor_sync.d",	"d,t,-0(s)",	0x70000279, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"ammax_sync.w",	"d,t,-0(s)",	0x700002b9, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"ammax_sync.d",	"d,t,-0(s)",	0x700002f9, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"ammin_sync.w",	"d,t,-0(s)",	0x70000339, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"ammin_sync.d",	"d,t,-0(s)",	0x70000379, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"ammaxu_sync.w",	"d,t,-0(s)",	0x700003b9, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"ammaxu_sync.d",	"d,t,-0(s)",	0x700003f9, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"amminu_sync.w",	"d,t,-0(s)",	0x70000439, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"amminu_sync.d",	"d,t,-0(s)",	0x70000479, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"amswap.w",		"d,t,-0(s)",	0x70000038, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"amswap.d",		"d,t,-0(s)",	0x70000078, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"amadd.w",		"d,t,-0(s)",	0x700000b8, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"amadd.d",		"d,t,-0(s)",	0x700000f8, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"amand.w",		"d,t,-0(s)",	0x70000138, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"amand.d",		"d,t,-0(s)",	0x70000178, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"amor.w",		"d,t,-0(s)",	0x700001b8, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"amor.d",		"d,t,-0(s)",	0x700001f8, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"amxor.w",		"d,t,-0(s)",	0x70000238, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"amxor.d",		"d,t,-0(s)",	0x70000278, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"ammax.w",		"d,t,-0(s)",	0x700002b8, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"ammax.d",		"d,t,-0(s)",	0x700002f8, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"ammin.w",		"d,t,-0(s)",	0x70000338, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"ammin.d",		"d,t,-0(s)",	0x70000378, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"ammaxu.w",		"d,t,-0(s)",	0x700003b8, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"ammaxu.d",		"d,t,-0(s)",	0x700003f8, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"amminu.w",		"d,t,-0(s)",	0x70000438, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+{"amminu.d",		"d,t,-0(s)",	0x70000478, 0xfc0007ff,	MOD_1|RD_2|SM,		0,		0,		LAMO,	0 },
+
 /* R5900 VU0 Macromode instructions. */
 {"vabs",		"+7+K,+6+K",	  0x4a0001fd, 0xfe0007ff,	CP,		VU0CH,		VU0,		0,	0 },
 {"vadd",		"+5+K,+6+K,+7+K", 0x4a000028, 0xfe00003f,	CP,		VU0CH,		VU0,		0,	0 },
-- 
2.24.1

