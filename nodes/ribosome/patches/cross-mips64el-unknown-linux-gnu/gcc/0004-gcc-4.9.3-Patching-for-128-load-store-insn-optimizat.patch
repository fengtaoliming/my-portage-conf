From 0bc2bc6bec8e3690b2eb46bcf1689b04ef75eccf Mon Sep 17 00:00:00 2001
From: xuchenghua <xuchenghua@loongson.cn>
Date: Wed, 9 Dec 2015 11:43:32 +0800
Subject: [PATCH 4/4] gcc-4.9.3: Patching for 128 load/store insn optimization.

    Add option -mgs464-func-save-restore-reg.
    Use gss<l>q[c1] instructions for save and restore reg  in functions prologue and epilogue.
    The option is opened by default.
    Use -mno-gs464-func-save-restore-reg to disable this optimization.

    mips/
    loongson.md: Added Template of gslq, gssq, gslqc1, gssqc1.
    mips-protos.h: Added func protos.
    mips.c: Modify mips_for_each_saved_gpr_and_fpr().
    mips.opt: Added options -m[no-]gs464-func-save-restore-reg.

Change-Id: Icbe0a22ac5d5b39ed8ddd9e53c16b9ecfcc98891

[Ported to GCC 5.4.0 with code cleanups by @xen0n.]

Conflicts:
	gcc/config/mips/loongson.md
	gcc/config/mips/mips.c
	gcc/config/mips/mips.opt
---
 gcc/config/mips/loongson.md   |  70 +++++++++++
 gcc/config/mips/mips-protos.h |   4 +
 gcc/config/mips/mips.c        | 280 +++++++++++++++++++++++++++++++++++++++++-
 gcc/config/mips/mips.opt      |   4 +
 4 files changed, 355 insertions(+), 3 deletions(-)

diff --git a/gcc/config/mips/loongson.md b/gcc/config/mips/loongson.md
index 0b19bd7..d2da0c9 100644
--- a/gcc/config/mips/loongson.md
+++ b/gcc/config/mips/loongson.md
@@ -907,3 +907,73 @@
   mips_expand_vec_reduc (operands[0], operands[1], gen_umin<mode>3);
   DONE;
 })
+
+;; FOR G3A 128-bit mem access instructions
+;; gssq and gslq define_insn pattern
+(define_insn "movsqdi_internal"
+  [(parallel [(set (match_operand:DI 0 "stack_operand" "")
+                   (match_operand:DI 1 "register_operand" ""))
+              (set (match_operand:DI 2 "stack_operand" "")
+                   (match_operand:DI 3 "register_operand" ""))])]
+  "mips_gs464_128_store_p(operands)"
+  {
+    return "gssq\t%1,%3,%2";
+  }
+  [(set_attr "length" "8")
+   (set_attr "can_delay" "no")])
+
+(define_insn "movsqdf_internal"
+  [(parallel [(set (match_operand:DF 0 "stack_operand" "")
+                   (match_operand:DF 1 "register_operand" ""))
+              (set (match_operand:DF 2 "stack_operand" "")
+                   (match_operand:DF 3 "register_operand" ""))])]
+  "mips_gs464_128_store_p(operands)"
+  {
+    return "gssqc1\t%1,%3,%2";
+  }
+  [(set_attr "length" "8")
+   (set_attr "can_delay" "no")])
+
+(define_insn "movlqdi_internal"
+  [(parallel [(set (match_operand:DI 0 "register_operand" "")
+                   (match_operand:DI 1 "stack_operand" ""))
+              (set (match_operand:DI 2 "register_operand" "")
+                   (match_operand:DI 3 "stack_operand" ""))])]
+  "mips_gs464_128_load_p(operands)"
+  {
+    return "gslq\t%0,%2,%3";
+  }
+  [(set_attr "length" "8")
+   (set_attr "can_delay" "no")])
+
+(define_insn "movlqdf_internal"
+  [(parallel [(set (match_operand:DF 0 "register_operand" "")
+                   (match_operand:DF 1 "stack_operand" ""))
+              (set (match_operand:DF 2 "register_operand" "")
+                   (match_operand:DF 3 "stack_operand" ""))])]
+  "mips_gs464_128_load_p(operands)"
+  {
+    return "gslqc1\t%0,%2,%3";
+  }
+  [(set_attr "length" "8")
+   (set_attr "can_delay" "no")])
+
+;;for insn_and_split template sign extend
+(define_insn "gsdmul3di"
+  [(set (match_operand:DI 0 "register_operand" "=d")
+        (mult:DI (sign_extend:DI (match_operand:SI 1 "register_operand" "d"))
+                  (sign_extend: DI (match_operand:SI 2 "register_operand" "d"))))]
+  "TARGET_LOONGSON_3A && TARGET_64BIT"
+  "gsdmult\t%0,%1,%2"
+  [(set_attr "type" "imul3nc")
+   (set_attr "mode" "SI")])
+
+;;for insn_and_split template zero extend
+(define_insn "ugsdmul3di"
+  [(set (match_operand:DI 0 "register_operand" "=d")
+        (mult:DI (zero_extend:DI (match_operand:SI 1 "register_operand" "d"))
+                  (zero_extend: DI (match_operand:SI 2 "register_operand" "d"))))]
+  "TARGET_LOONGSON_3A && TARGET_64BIT"
+  "gsdmultu\t%0,%1,%2"
+  [(set_attr "type" "imul3nc")
+   (set_attr "mode" "SI")])
diff --git a/gcc/config/mips/mips-protos.h b/gcc/config/mips/mips-protos.h
index b48e04f..e711b0f 100644
--- a/gcc/config/mips/mips-protos.h
+++ b/gcc/config/mips/mips-protos.h
@@ -366,4 +366,8 @@ typedef rtx (*mulsidi3_gen_fn) (rtx, rtx, rtx);
 extern mulsidi3_gen_fn mips_mulsidi3_gen_fn (enum rtx_code);
 #endif
 
+/* Loongson gs464 */
+extern bool mips_gs464_128_store_p (rtx[]);
+extern bool mips_gs464_128_load_p (rtx[]);
+
 #endif /* ! GCC_MIPS_PROTOS_H */
diff --git a/gcc/config/mips/mips.c b/gcc/config/mips/mips.c
index 67ec6b9..8c810df 100644
--- a/gcc/config/mips/mips.c
+++ b/gcc/config/mips/mips.c
@@ -10763,6 +10763,63 @@ typedef void (*mips_save_restore_fn) (rtx, rtx);
    stack pointer.  */
 
 static void
+mips_gs464_save_restore_reg (machine_mode mode, int regno1, int regno2,
+                       HOST_WIDE_INT offset_high, int save_restore_flag)
+{
+  rtx mem0, mem1;
+  rtx op0, op1;
+  rtx high_offset_addr, low_offset_addr;
+
+  /* gssq reg1, reg2, offset(base_reg) means:
+   * mem0: (offset + 8)(base_reg) = reg1
+   * mem1: offset(base_reg) = reg2
+   * the offset appeared in offset(base_reg) is low mem */
+
+  high_offset_addr = plus_constant (Pmode,stack_pointer_rtx, offset_high);
+  low_offset_addr = plus_constant (Pmode,stack_pointer_rtx, offset_high - 8);
+
+  mem0 = gen_frame_mem (mode, high_offset_addr);
+  mem1 = gen_frame_mem (mode, low_offset_addr);
+  op0 = gen_rtx_REG (mode, regno1);
+  op1 = gen_rtx_REG (mode, regno2);
+
+  /* save register */
+  if(save_restore_flag == 0){
+
+    emit (gen_rtx_PARALLEL (VOIDmode,
+    gen_rtvec (2,
+    gen_rtx_SET (VOIDmode, mem0, op0),
+    gen_rtx_SET (VOIDmode, mem1, op1))));
+
+    /* qiuji make the last emit 128bit gssq instruction frame-related.
+     * Add reg_note to show that it performs the operation described by
+     * FRAME_PATTERN.  */
+    rtx expr1 = mips_frame_set(mem0, op0);
+    rtx expr2 = mips_frame_set(mem1, op1);
+    #if 0
+        printf("now insn emit:\n");
+        print_rtl_single(stdout,insn);
+    #endif
+    mips_set_frame_expr (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, expr1, expr2)));
+    #if 0
+        printf("after set insn emit:\n");
+        print_rtl_single(stdout,insn);
+    #endif
+  }
+
+  /* restore register */
+  if(save_restore_flag == 1){
+
+    emit (gen_rtx_PARALLEL (VOIDmode,
+    gen_rtvec (2,
+    gen_rtx_SET (VOIDmode, op0, mem0),
+    gen_rtx_SET (VOIDmode, op1, mem1))));
+
+  }
+
+}
+
+static void
 mips_save_restore_reg (machine_mode mode, int regno,
 		       HOST_WIDE_INT offset, mips_save_restore_fn fn)
 {
@@ -10929,13 +10986,18 @@ umips_build_save_restore (mips_save_restore_fn fn,
 
 static void
 mips_for_each_saved_gpr_and_fpr (HOST_WIDE_INT sp_offset,
-				 mips_save_restore_fn fn)
+				 mips_save_restore_fn fn,
+				 int save_restore_flag)
 {
   machine_mode fpr_mode;
   int regno;
   const struct mips_frame_info *frame = &cfun->machine->frame;
   HOST_WIDE_INT offset;
   unsigned int mask;
+  int save_regno1 = 0;
+  int save_regno2 = 0;
+  int should_enable_loongisa_int_save_opt = 0;
+  int should_enable_loongisa_fp_save_opt = 0;
 
   /* Save registers starting from high to low.  The debuggers prefer at least
      the return register be stored at func+4, and also it allows us not to
@@ -10947,20 +11009,60 @@ mips_for_each_saved_gpr_and_fpr (HOST_WIDE_INT sp_offset,
   if (TARGET_MICROMIPS)
     umips_build_save_restore (fn, &mask, &offset);
 
+  /* The loongson3a gs464 gss<l>q[c1] instructions offset has 9+4 bit equal to 4096
+   * Option -mno-gs464-func-save-restore-reg disable this. */
+  should_enable_loongisa_int_save_opt = flag_sr_opt && TARGET_LOONGSON_3A
+	  && TARGET_64BIT && !ABI_32 && (offset < 4096);
+
   for (regno = GP_REG_LAST; regno >= GP_REG_FIRST; regno--)
     if (BITSET_P (mask, regno - GP_REG_FIRST))
       {
 	/* Record the ra offset for use by mips_function_profiler.  */
 	if (regno == RETURN_ADDR_REGNUM)
 	  cfun->machine->frame.ra_fp_offset = offset + sp_offset;
+	if (should_enable_loongisa_int_save_opt)
+	  {
+	    if (((offset - UNITS_PER_WORD) % 16) != 0)
+	      {
+		mips_save_restore_reg (word_mode, regno, offset, fn);
+		offset -= UNITS_PER_WORD;
+		continue;
+	      }
+
+	    if (save_regno1 == 0)
+	      save_regno1 = regno;
+	    else
+	      save_regno2 = regno;
+
+	    /* deal with pairs of saved regno, the offset is high addr */
+	    if (save_regno2 != 0)
+	      {
+		mips_gs464_save_restore_reg (DImode, save_regno1, save_regno2, offset, save_restore_flag);
+		offset -= 2 * UNITS_PER_WORD;
+		save_regno1 = save_regno2 = 0;
+	      }
+
+	    continue;
+	  }
 	mips_save_restore_reg (word_mode, regno, offset, fn);
 	offset -= UNITS_PER_WORD;
       }
 
+  /* after for loops, there will be a single saved reg,
+   * deal with single saved regno */
+  if (should_enable_loongisa_int_save_opt && save_regno1 != 0)
+    {
+      mips_save_restore_reg (word_mode, save_regno1, offset, fn);
+      offset -= UNITS_PER_WORD;
+    }
+  save_regno1 = save_regno2 = 0;
+
   /* This loop must iterate over the same space as its companion in
      mips_compute_frame_info.  */
   offset = cfun->machine->frame.fp_sp_offset - sp_offset;
   fpr_mode = (TARGET_SINGLE_FLOAT ? SFmode : DFmode);
+  should_enable_loongisa_fp_save_opt = flag_sr_opt && TARGET_LOONGSON_3A
+	  && TARGET_FLOAT64 && !ABI_32 && (fpr_mode == DFmode) && (offset < 4096);
   for (regno = FP_REG_LAST - MAX_FPRS_PER_FMT + 1;
        regno >= FP_REG_FIRST;
        regno -= MAX_FPRS_PER_FMT)
@@ -10974,10 +11076,42 @@ mips_for_each_saved_gpr_and_fpr (HOST_WIDE_INT sp_offset,
 	    else
 	      mips_save_restore_reg (SFmode, regno, offset, fn);
 	  }
+	else if (should_enable_loongisa_fp_save_opt)
+	  {
+	    if(((offset - GET_MODE_SIZE (fpr_mode)) % 16) != 0)
+	      {
+		mips_save_restore_reg (fpr_mode, regno, offset, fn);
+		offset -= GET_MODE_SIZE (fpr_mode);
+		continue;
+	      }
+
+	    if (save_regno1 == 0)
+	      save_regno1 = regno;
+	    else
+	      save_regno2 = regno;
+
+	    /* deal with pairs of saved regno */
+	    if (save_regno2 != 0)
+	      {
+		mips_gs464_save_restore_reg (fpr_mode, save_regno1, save_regno2, offset, save_restore_flag);
+		offset -= 2 * GET_MODE_SIZE (fpr_mode);
+		save_regno1 = save_regno2 = 0;
+	      }
+
+	    continue;
+	  }
 	else
 	  mips_save_restore_reg (fpr_mode, regno, offset, fn);
 	offset -= GET_MODE_SIZE (fpr_mode);
       }
+
+  /* after for loops, there will be a single saved reg,
+   * deal with single saved regno */
+  if (should_enable_loongisa_fp_save_opt && save_regno1 != 0)
+    {
+      mips_save_restore_reg (fpr_mode, save_regno1, offset, fn);
+      offset -= GET_MODE_SIZE (fpr_mode);
+    }
 }
 
 /* Return true if a move between register REGNO and its save slot (MEM)
@@ -11584,7 +11718,7 @@ mips_expand_prologue (void)
 	      size -= step1;
 	    }
 	  mips_for_each_saved_acc (size, mips_save_reg);
-	  mips_for_each_saved_gpr_and_fpr (size, mips_save_reg);
+	  mips_for_each_saved_gpr_and_fpr (size, mips_save_reg, 0);
 	}
     }
 
@@ -11910,7 +12044,7 @@ mips_expand_epilogue (bool sibcall_p)
       /* Restore the registers.  */
       mips_for_each_saved_acc (frame->total_size - step2, mips_restore_reg);
       mips_for_each_saved_gpr_and_fpr (frame->total_size - step2,
-				       mips_restore_reg);
+				       mips_restore_reg, 1);
 
       if (cfun->machine->interrupt_handler_p)
 	{
@@ -18613,6 +18747,146 @@ mips_prepare_pch_save (void)
   mips_set_compression_mode (0);
   mips16_globals = 0;
 }
+
+/* Loongson Test for GS464 128 bit offset mem is legaly */
+bool
+mips_gs464_128_store_p(rtx operands[])
+{
+  int offset1;
+  int offset2;
+  rtx dst1 = operands[0];
+  rtx dst2 = operands[2];
+  rtx src1 = operands[1];
+  rtx src2 = operands[3];
+
+  if(GET_CODE(XEXP(dst1,0)) == PLUS)
+  {
+    offset1 = XINT(XEXP(XEXP(dst1,0),1),0);
+  #if 0 /*debug code*/
+    printf("464po: store dst1 PLUS offset :%d\n",offset1);
+  #endif
+  }
+  else if(GET_CODE(XEXP(dst1,0)) == MINUS)
+  {
+    offset1 = XINT(XEXP(XEXP(dst1,0),1),0);
+  #if 0 /*debug code*/
+    printf("464po: store dst1 MINUS offset :%d\n",offset1);
+  #endif
+  }
+  else
+  {
+    offset1 = 0;
+  }
+
+  if(GET_CODE(XEXP(dst2,0)) == PLUS)
+  {
+    offset2= XINT(XEXP(XEXP(dst2,0),1),0);
+  #if 0 /*debug code*/
+    printf("464po: store dst2 PLUS offset :%d\n",offset2);
+  #endif
+  }
+  else if(GET_CODE(XEXP(dst2,0)) == MINUS)
+  {
+    offset2= XINT(XEXP(XEXP(dst2,0),1),0);
+  #if 0 /*debug code*/
+    printf("464po: store dst2 MINUS offset :%d\n",offset2);
+  #endif
+  }
+  else
+  {
+    offset2 = 0;
+  }
+
+  if(offset2 % 16 !=0)
+  {
+   /*store offset is not align!*/
+    return false;
+  }
+
+  if( offset1 - offset2 !=8)
+  {
+   /*store offset diff is not 8!*/
+    return false;
+  }
+
+  if( offset2>4095 || offset2<-4096)
+  {
+   /*load offset out of range!*/
+    return false;
+  }
+
+  return true;
+}
+
+bool
+mips_gs464_128_load_p(rtx operands[])
+{
+  int offset1;
+  int offset2;
+  rtx dst1 = operands[0];
+  rtx dst2 = operands[2];
+  rtx src1 = operands[1];
+  rtx src2 = operands[3];
+
+  if(GET_CODE(XEXP(src1,0)) == PLUS)
+  {
+    offset1 = XINT(XEXP(XEXP(src1,0),1),0);
+  #if 0 /*debug code*/
+    printf("464po: load src1 PLUS offset :%d\n",offset1);
+  #endif
+  }
+  else if(GET_CODE(XEXP(src1,0)) == MINUS)
+  {
+    offset1 = XINT(XEXP(XEXP(src1,0),1),0);
+  #if 0 /*debug code*/
+    printf("464po: load src1 MINUS offset :%d\n",offset1);
+  #endif
+  }
+  else
+  {
+    offset1 = 0;
+  }
+
+  if(GET_CODE(XEXP(src2,0)) == PLUS)
+  {
+    offset2= XINT(XEXP(XEXP(src2,0),1),0);
+  #if 0 /*debug code*/
+    printf("464po: load src2 PLUS offset :%d\n",offset2);
+  #endif
+  }
+  else if(GET_CODE(XEXP(src2,0)) == MINUS)
+  {
+    offset2= XINT(XEXP(XEXP(src2,0),1),0);
+  #if 0 /*debug code*/
+    printf("464po: load src2 MINUS offset :%d\n",offset2);
+  #endif
+  }
+  else
+  {
+    offset2 =0;
+  }
+
+  if(offset2 % 16 !=0)
+  {
+   /*load offset is not align!*/
+    return false;
+  }
+
+  if( offset1 - offset2 !=8)
+  {
+   /*load offset diff is not 8!*/
+    return false;
+  }
+
+  if( offset2>4095 || offset2<-4096)
+  {
+   /*load offset out of range!*/
+     return false;
+  }
+
+  return true;
+}
+
 
 /* Generate or test for an insn that supports a constant permutation.  */
 
diff --git a/gcc/config/mips/mips.opt b/gcc/config/mips/mips.opt
index 9e89aa9..4feb1a0 100644
--- a/gcc/config/mips/mips.opt
+++ b/gcc/config/mips/mips.opt
@@ -416,5 +416,9 @@ modd-spreg
 Target Report Mask(ODD_SPREG)
 Enable use of odd-numbered single-precision registers
 
+mgs464-func-save-restore-reg
+Target Report Var(flag_sr_opt) Init(1) Optimization
+Use gss<l>q[c1] instructions for save and restore reg  in functions prologue and epilogue
+
 noasmopt
 Driver
-- 
2.9.2

